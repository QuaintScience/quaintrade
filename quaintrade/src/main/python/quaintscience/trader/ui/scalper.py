# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'scalper.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import sys
import os
import yaml

from PyQt6.QtWidgets import QApplication, QLabel, QWidget, QHBoxLayout, QVBoxLayout, QLineEdit, QPushButton, QComboBox, QTabWidget, QListWidget

from matplotlib.backends.backend_qtagg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.backends.backend_qtagg import NavigationToolbar2QT as NavigationToolbar
from matplotlib.figure import Figure

class ScalperApp():

    def __init__(self,
                 settings_file: str = ".scalper.settings"):
        self.settings_file = settings_file
        self.login_data = {}
        self.init()

    def init(self) -> None:
        self.init_ui()
        self.init_data()
        self.refresh_ui()

    
    def init_data(self) -> None:
        if os.path.exists(self.settings_file):
            with open(self.settings_file, 'r', encoding='utf-8') as fid:
                self.login_data = yaml.safe_load(fid)

    def refresh_ui(self) -> None:
        self.save_login_data_btn.clicked.connect(self.ui_save_login_creds)
        self.login_providers.changeEvent.connect(self.ui_update_login_details)
        self.login_btn.clicked.connect(self.ui_perform_login)
    
    def ui_save_login_creds(self):
        api_key = self.api_key.text
        api_secret = self.api_secret.text
        provider = self.login_providers.currentText()
        self.login_data[provider] = {"api_key": api_key, "api_secret": api_secret}
        with open(self.settings_file, 'w', encoding='utf-8') as fid:
            yaml.dump(fid, self.login_data)

    def ui_update_login_details(self):
        provider = self.login_providers.currentText()
        if provider in self.login_data:
            self.api_key.setText(self.login_data[provider]["api_key"])
            self.api_secret.setText(self.login_data[provider]["api_secret"])

    def ui_perform_login(self):
        

    def init_ui(self) -> None:
        self.app = QApplication([])

        self.window = QWidget()
        self.window.setWindowTitle("Quaint Scalper")

        self.login_widget = QWidget()
        self.login_details_layout = QHBoxLayout()
        self.api_key = QLineEdit()
        self.api_secret = QLineEdit()
        self.login_btn = QPushButton("Login")
        self.save_login_data_btn = QPushButton("Save Creds")
        self.login_providers = QComboBox()
        self.login_providers.addItems(["Fyers", "Zerodha", "Neo"])
        self.login_details_layout.addWidget(QLabel("Login"))
        self.login_details_layout.addWidget(self.login_providers)
        self.login_details_layout.addWidget(self.api_key)
        self.login_details_layout.addWidget(self.api_secret)
        self.login_details_layout.addWidget(self.login_btn)
        self.login_details_layout.addWidget(self.save_login_data_btn)
        self.login_widget.setLayout(self.login_details_layout)

        self.side_widget = QListWidget()

        self.side_widget_layout = QVBoxLayout()
        self.control_tabs = QTabWidget()

        self.login_status_tab = QWidget()
        self.login_status_layout = QVBoxLayout()
        self.login_status_list = QListWidget()
        self.logout_button = QPushButton("Logout")
        self.login_status_layout.addWidget(self.login_status_list)
        self.login_status_layout.addWidget(self.logout_button)
        self.login_status_tab.setLayout(self.login_status_layout)

        self.order_tab = QWidget()
        self.order_tab_layout = QVBoxLayout()

        self.orders_list = QListWidget()
        self.modify_order = QPushButton("Modify")
        self.delete_order = QPushButton("Delete")
        self.scrip_list = QListWidget()
        self.new_order = QPushButton("New")

        self.order_tab_layout.addWidget(self.orders_list)
        self.order_tab_layout.addWidget(self.modify_order)
        self.order_tab_layout.addWidget(self.delete_order)
        self.order_tab_layout.addWidget(self.scrip_list)
        self.order_tab_layout.addWidget(self.new_order)
        self.order_tab.setLayout(self.order_tab_layout)

        self.control_tabs.addTab(self.login_status_tab, "Login")
        self.control_tabs.addTab(self.order_tab, "Orders")

        self.side_widget_layout.addWidget(self.control_tabs)
        self.side_widget.setLayout(self.side_widget_layout)

        self.working_area = QWidget()
        self.working_area_layout = QHBoxLayout()
        self.working_area_layout.addWidget(self.side_widget)
        self.figure = Figure()
        self.canvas = FigureCanvas(self.figure)
        self.working_area_layout.addWidget(self.canvas, stretch=3)
        self.working_area.setLayout(self.working_area_layout)



        self.main_layout = QVBoxLayout()
        self.main_layout.addWidget(self.login_widget)
        self.main_layout.addWidget(self.working_area)

        self.window.setLayout(self.main_layout)

    def run(self) -> None:
        self.window.show()
        sys.exit(self.app.exec())


app = ScalperApp()
app.run()